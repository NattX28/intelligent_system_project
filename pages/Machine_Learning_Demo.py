import streamlit as st
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
import seaborn as sns

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
st.set_page_config(
    page_title="ML Demo - Spotify Popularity Prediction",
    page_icon="üéµ",
    layout="wide"
)

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
@st.cache_resource
def load_models():
    models = {}
    try:
        models['Linear Regression'] = pickle.load(open('models/spotify_popularity_lr.pkl', 'rb'))
        models['Random Forest'] = pickle.load(open('models/spotify_popularity_rf.pkl', 'rb'))
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")
    return models

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á
def predict_popularity(models, features):
    predictions = {}
    for name, model in models.items():
        predictions[name] = model.predict(features)[0]
    return predictions

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
models = load_models()

st.title("üéµ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (Spotify Popularity Prediction)")
st.markdown("""
‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á **Linear Regression** ‡πÅ‡∏•‡∏∞ **Random Forest Regressor**
""")

def generate_random_input():
    return {
        'acousticness': np.random.uniform(0, 1),
        'danceability': np.random.uniform(0, 1),
        'energy': np.random.uniform(0, 1),
        'instrumentalness': np.random.uniform(0, 1),
        'key': np.random.randint(0, 12),
        'liveness': np.random.uniform(0, 1),
        'loudness': np.random.uniform(-60, 0),
        'mode': np.random.choice([0, 1]),
        'speechiness': np.random.uniform(0, 1),
        'tempo': np.random.uniform(50, 200),
        'time_signature': np.random.choice([3, 4, 5, 6, 7]),
        'valence': np.random.uniform(0, 1)
    }

# ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
st.header("‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á")
col1, col2, col3 = st.columns(3)

if st.button("üé≤ ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï"):
    random_values = generate_random_input()
else:
    random_values = None

with col1:
    track_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á", "Shape of You")
    artist_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô", "Ed Sheeran")
    acousticness = st.slider("Acousticness", 0.0, 1.0, random_values['acousticness'] if random_values else 0.5, 0.01)
    danceability = st.slider("Danceability", 0.0, 1.0, random_values['danceability'] if random_values else 0.5, 0.01)

with col2:
    energy = st.slider("Energy", 0.0, 1.0, random_values['energy'] if random_values else 0.5, 0.01)
    instrumentalness = st.slider("Instrumentalness", 0.0, 1.0, random_values['instrumentalness'] if random_values else 0.0, 0.01)
    key = st.selectbox("Key", list(range(12)), random_values['key'] if random_values else 0)
    liveness = st.slider("Liveness", 0.0, 1.0, random_values['liveness'] if random_values else 0.1, 0.01)

with col3:
    loudness = st.slider("Loudness (dB)", -60.0, 0.0, random_values['loudness'] if random_values else -10.0, 0.1)
    mode = st.selectbox("Mode", [0, 1], index=[0, 1].index(random_values['mode']) if random_values else 1, format_func=lambda x: "Minor" if x == 0 else "Major")
    speechiness = st.slider("Speechiness", 0.0, 1.0, random_values['speechiness'] if random_values else 0.1, 0.01)
    tempo = st.slider("Tempo (BPM)", 50.0, 200.0, random_values['tempo'] if random_values else 120.0, 0.1)
    time_signature = st.selectbox("Time Signature", [3, 4, 5, 6, 7], index=[3, 4, 5, 6, 7].index(random_values['time_signature']) if random_values else 1)
    valence = st.slider("Valence", 0.0, 1.0, random_values['valence'] if random_values else 0.5, 0.01)

if st.button("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°", use_container_width=True):
    if models:
        features = pd.DataFrame({
            'acousticness': [acousticness],
            'danceability': [danceability],
            'energy': [energy],
            'instrumentalness': [instrumentalness],
            'key': [key],
            'liveness': [liveness],
            'loudness': [loudness],
            'mode': [mode],
            'speechiness': [speechiness],
            'tempo': [tempo],
            'time_signature': [time_signature],
            'valence': [valence]
        })
        
        predictions = predict_popularity(models, features)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        st.success(f"**‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á {track_name} - {artist_name}:**")
        for model_name, pred in predictions.items():
            st.markdown(f"- **{model_name}:** {pred:.1f}/100")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        st.subheader("üìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•")
        fig, ax = plt.subplots(figsize=(8, 4))
        ax.bar(predictions.keys(), predictions.values(), color=['blue', 'green'])
        ax.set_ylim(0, 100)
        ax.set_ylabel("Popularity Score")
        st.pyplot(fig)



# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
st.markdown("""### ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞
- **acousticness**: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∞‡∏Ñ‡∏π‡∏™‡∏ï‡∏¥‡∏Å (0.0-1.0)
- **danceability**: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡πâ‡∏ô (0.0-1.0) 
- **energy**: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (0.0-1.0)
- **instrumentalness**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏•‡∏á‡∏ö‡∏£‡∏£‡πÄ‡∏•‡∏á ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡πâ‡∏≠‡∏á (0.0-1.0)
- **key**: ‡∏Å‡∏∏‡∏ç‡πÅ‡∏à‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (0-11)
- **liveness**: ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏î (0.0-1.0)
- **loudness**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (dB)
- **mode**: ‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (0 = minor, 1 = major)
- **speechiness**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡πÉ‡∏ô‡πÄ‡∏û‡∏•‡∏á (0.0-1.0)
- **tempo**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (BPM)
- **time_signature**: ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÄ‡∏û‡∏•‡∏á (3, 4, 5, ...)
- **valence**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç/‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á (0.0-1.0)
""")