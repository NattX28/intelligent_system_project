import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt
import os
from PIL import Image
import io

# Setup ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à
st.set_page_config(page_title="Weather Classifier", page_icon="üåà", layout="wide")

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
st.title("‚ú® Weather Image Classification By Neural Network ‚ú®")
st.write("""
### ‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô Demo ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏π‡∏õ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! 

Upload ‡∏£‡∏π‡∏õ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ classify ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! 
‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡∏Ç‡∏≠‡∏á‡∏ú‡∏°‡∏à‡∏∞‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô category ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:
""")

# ‡πÅ‡∏™‡∏î‡∏á categories ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
col_cat1, col_cat2, col_cat3, col_cat4 = st.columns(4)
with col_cat1:
    st.info("‚òÅÔ∏è **Cloudy Mood**")
with col_cat2:
    st.info("üåßÔ∏è **Rainy Vibes**")
with col_cat3:
    st.info("‚òÄÔ∏è **Sunny Day**")
with col_cat4:
    st.info("üåÖ **Sunrise Magic**")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
@st.cache_resource
def load_nn_model():
    try:
        # Try ‡πÇ‡∏´‡∏•‡∏î fine-tuned model ‡∏Å‡πà‡∏≠‡∏ô
        model_path = os.path.join('models', 'weather_cnn_model_finetuned.h5')
        if os.path.exists(model_path):
            model = load_model(model_path)
        else:
            # Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏õ‡∏Å‡∏ï‡∏¥
            model_path = os.path.join('models', 'weather_cnn_model.h5')
            model = load_model(model_path)
        return model
    except Exception as e:
        st.error(f"Oops! ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")
        return None

# Preprocessing ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
def preprocess_image(img):
    # Resize ‡∏£‡∏π‡∏õ
    img = img.resize((224, 224))
    # Convert ‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞ normalize
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0
    return img_array

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô predict
def predict_weather(img_array, model):
    # Class names ‡πÅ‡∏ö‡∏ö fun & friendly
    class_names = ['Cloudy Mood ‚òÅÔ∏è', 'Rainy Vibes üåßÔ∏è', 'Sunny Day ‚òÄÔ∏è', 'Sunrise Magic üåÖ']
    
    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    prediction = model.predict(img_array)
    predicted_class_index = np.argmax(prediction[0])
    predicted_class = class_names[predicted_class_index]
    confidence = prediction[0][predicted_class_index] * 100
    
    return predicted_class, confidence, prediction[0]

# Main content
col1, col2 = st.columns([1, 1])

with col1:
    st.subheader("üì∑ Upload Your Weather Snap!")
    uploaded_file = st.file_uploader("Choose a cool weather pic...", type=["jpg", "jpeg", "png"])
    
    if uploaded_file is not None:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ
        try:
            img = Image.open(uploaded_file)
            st.image(img, caption='Your awesome pic! üì∏', use_column_width=True)
            
            # Preprocess
            img_array = preprocess_image(img)
            
            # Predict ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
            if st.button('‚ú® Classify My Weather! ‚ú®'):
                with st.spinner('‡∏£‡∏≠‡πÅ‡∏õ‡πä‡∏õ‡∏ô‡∏∞ ‡∏ú‡∏°‡∏Ç‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏¥‡∏î‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà... ü§î'):
                    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
                    model = load_nn_model()
                    
                    if model:
                        predicted_class, confidence, prediction_scores = predict_weather(img_array, model)
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• prediction ‡πÅ‡∏ö‡∏ö‡∏™‡∏ô‡∏∏‡∏Å‡πÜ
                        st.success(f"### It's {predicted_class}! ‚úÖ")
                        
                        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
                        if confidence > 90:
                            st.info(f"‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏°‡∏≤‡∏Å‡πÜ ‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÇ‡∏•‡∏Å! ({confidence:.1f}%) üöÄ")
                        elif confidence > 70:
                            st.info(f"‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ô‡∏∞ ({confidence:.1f}%) üëç")
                        else:
                            st.info(f"‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÅ‡∏ô‡πà‡πÉ‡∏à‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡πÄ‡∏•‡∏¢... ({confidence:.1f}%) ü§î")
                        
                        # Chart ‡∏™‡∏ß‡∏¢‡πÜ
                        class_names = ['Cloudy Mood ‚òÅÔ∏è', 'Rainy Vibes üåßÔ∏è', 'Sunny Day ‚òÄÔ∏è', 'Sunrise Magic üåÖ']
                        fig, ax = plt.subplots(figsize=(8, 4))
                        y_pos = np.arange(len(class_names))
                        bars = ax.barh(y_pos, prediction_scores*100, align='center', 
                                 color=['cornflowerblue', 'royalblue', 'gold', 'orange'])
                        ax.set_yticks(y_pos)
                        ax.set_yticklabels(class_names)
                        ax.invert_yaxis()  # Labels read top-to-bottom
                        ax.set_xlabel('Confidence %')
                        ax.set_title('AI Prediction Breakdown')
                        
                        # ‡πÅ‡∏™‡∏î‡∏á chart
                        st.pyplot(fig)
        except Exception as e:
            st.error(f"Oops! ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô: {e}")

with col2:
    st.subheader("üß† Behind the Magic")
    
    # ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£
    st.write("### ü§ñ AI Model")
    st.write("""
    ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ **MobileNetV2** ‡πÄ‡∏õ‡πá‡∏ô backbone ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• - ‡πÄ‡∏õ‡πá‡∏ô CNN ‡∏™‡∏∏‡∏î‡∏ï‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥!
    
    **Architecture highlights:**
    - Transfer learning ‡∏à‡∏≤‡∏Å model ‡∏ó‡∏µ‡πà pre-train ‡∏ö‡∏ô ImageNet ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
    - Fine-tune ‡∏î‡πâ‡∏ß‡∏¢ dataset ‡∏£‡∏π‡∏õ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏£‡∏¥‡∏á‡πÜ
    - Dropout layers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ overfitting 
    - Global Average Pooling ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô parameters
    """)
    
    # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á metrics
    try:
        if os.path.exists('data/training_history.png'):
            st.write("### üìä Training Stats")
            st.image('data/training_history.png', use_column_width=True)
        
        if os.path.exists('data/confusion_matrix.png'):
            st.write("### üß© Confusion Matrix")
            st.image('data/confusion_matrix.png', use_column_width=True)
    except Exception as e:
        st.warning("Performance metrics ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (training data needed)")
    
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    st.write("### üöÄ How to Use")
    st.write("""
    **‡∏á‡πà‡∏≤‡∏¢‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß**
    1. Upload ‡∏£‡∏π‡∏õ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ñ‡πà‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    2. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "Classify My Weather!"
    3. ‡∏£‡∏≠‡πÅ‡∏õ‡πä‡∏ö‡∏ô‡∏∂‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    4. Bar chart ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏ö‡∏ö‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á
    """)

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û
st.subheader("üì∏ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û (Sample Pics)")
st.write("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏à‡∏∞‡∏•‡∏≠‡∏á? ‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà:")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏¢‡πå‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
sample_col1, sample_col2, sample_col3, sample_col4 = st.columns(4)

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏ô‡∏∏‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
with sample_col1:
    st.write("‚òÅÔ∏è **Cloudy Mood**")
    st.image("./images/cloudy_example2.jpg")
    st.caption("‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏à‡∏±‡∏á‡πÄ‡∏•‡∏¢")

with sample_col2:
    st.write("üåßÔ∏è **Rainy Vibes**")
    st.image("./images/rain_example2.jpg")
    st.caption("‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÜ")

with sample_col3:
    st.write("‚òÄÔ∏è **Sunny Day**")
    st.image("./images/shine_example2.jpg")
    st.caption("‡πÅ‡∏î‡∏î‡∏à‡πâ‡∏≤! Perfect day for outdoor!")

with sample_col4:
    st.write("üåÖ **Sunrise Magic**")
    st.image("./images/sunrise_example2.jpg")
    st.caption("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")

# Tech details ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏¢‡∏≤‡∏¢‡πÑ‡∏î‡πâ
with st.expander("üî¨ Tech Geek Corner"):
    st.write("""
    ### ü§ì ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
    
    **Model specs:**
    - **Base**: MobileNetV2 (pre-trained on ImageNet dataset)
    - **Input**: 224x224x3 (RGB images)
    - **Strategy**: Transfer learning + fine-tuning
    - **Optimizer**: Adam with learning rate scheduling
    - **Regularization**: Dropout + data augmentation
    
    **Image preprocessing pipeline:**
    1. Resize ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 224x224 pixels
    2. Normalize pixel values ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
    3. ‡∏ï‡∏≠‡∏ô training ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ data augmentation ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
    
    **Performance optimization:**
    - ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ balance ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á accuracy ‡∏Å‡∏±‡∏ö speed ‡πÑ‡∏î‡πâ‡∏î‡∏µ
    - Fine-tuning ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° performance ‡∏ö‡∏ô specific weather conditions
    - Confidence scores ‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ prediction
    """)

# Footer ‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢
st.markdown("---")
st.markdown("""
<div style='text-align: center;'>
    <p>‚ú® üå¶Ô∏è Predicting weather | Created by Nattawut Chongcasee ‚ú®</p>
</div>
""", unsafe_allow_html=True)